@using System.Reflection;
@using Mios.Payment;
@using Mios.Payment.Providers;

@{
	var assistAccount = String.IsNullOrEmpty(Request["assistMerchantId"]) ? "12345" : Request["assistMerchantId"];
	var dibsAccount = String.IsNullOrEmpty(Request["dibsAccount"]) ? "123456" : Request["dibsAccount"];
	var dibsSecret = String.IsNullOrEmpty(Request["dibsSecret"]) ? "123456" : Request["dibsSecret"];
	var providers = new Dictionary<string, IPaymentProvider> { 
		{"maksekeskus",new MaksekeskusPaymentProvider("account=&secret=&url=https://payment.maksekeskus.ee/pay/1/test/signed.html")},
		{"assist",     new AssistPaymentProvider("account="+assistAccount+"&testMode=true")},
		{"dibs",       new DibsPaymentProvider("account="+dibsAccount+"&secret="+dibsSecret) { TestMode = true, PaymentTypes = "ALL_CARDS,ALL_NETBANKS" }},
		{"solo",       new NordeaPaymentProvider("account=12345678&secret=LEHTI")},
		{"danske",     new DanskeBankPaymentProvider("account=000000000000&secret=jumCLB4T2ceZWGJ9ztjuhn5FaeZnTm5HpfDXWU2APRqfDcsrBs8mqkFARzm7uXKd&currency=EUR")},
		{"op",         new OsuuspankkiPaymentProvider("account=Esittelymyyja&secret=Esittelykauppiaansalainentunnus")},
		{"aktia",      new SamlinkPaymentProvider("url=https://auth.aktia.fi/vmtest&account=1111111111111&secret=1234567890123456789012345678901234567890123456789012345678901234") { Version = 10, KeyVersion = "0001" }},
		{"sp",				 new SamlinkPaymentProvider("url=https://verkkomaksu.saastopankki.fi/vm/login.html&account=0000000000&secret=11111111111111111111") { Version = 3 }},
		{"pop",        new SamlinkPaymentProvider("url=https://verkkomaksu.poppankki.fi/vm/login.html&account=0000000000&secret=11111111111111111111") { Version = 3 }},
		{"db",         new DanskeBankPaymentProvider("account=000000000000&currency=EUR&secret=jumCLB4T2ceZWGJ9ztjuhn5FaeZnTm5HpfDXWU2APRqfDcsrBs8mqkFARzm7uXKd")},
		{"hb",         new SamlinkPaymentProvider("url=https://verkkomaksu.inetpankki.samlink.fi/vm/SHBlogin.html&account=0000000000&secret=11111111111111111111")},
		{"aab",        new CrosskeyPaymentProvider("url=https://online.alandsbanken.fi/service/paybutton&identifier=AABESHOPID&account=660100-01130855&secret=PAPEGOJA&receiverName=Test")},
		{"tapiola",    new CrosskeyPaymentProvider("url=https://pankki.tapiola.fi/service/paybutton&identifier=TAPESHOPID&account=363630-01652643&secret=PAPUKAIJA&receiverName=Test")},
		{"spankki",    new CrosskeyPaymentProvider("url=https://online.s­-pankki.fi/service/paybutton&identifier=SPANKKIESHOPID&account=393900-­01002369&secret=SPANKKI&receiverName=Test")},
		{"senordea",   new NordeaSwedenPaymentProvider("url=https://gfs.nb.se/e-betalning/test_direktbetalning&account=999999&secret=1234567890ABCDEF1234567890ABCDEF&kvv=FF365893D899291C3BF505FB3175E880")},
		{"eeswedbank", new SwedbankPaymentProvider("account=10002050618003&language=ENG&merchantId=testvpos&receiverName=Keegi&url=https%3A%2F%2Fwww.seb.ee%2Fcgi-bin%2Fdv.sh%2Fun3min.r&privateKey=-----BEGIN%20RSA%20PRIVATE%20KEY-----%0D%0AMIICXAIBAAKBgQC%2BAROlXiRvi1T7Q9fAh0Lw73szAn26mqfKDqd6Bdplq3v%2BgVWC%0D%0A3v0%2BbgtfNakRE%2FUVYOxEA0z0viqRpKzPuNy8OstTMe8fFKs19NW8lBYik6NzJ4Bk%0D%0A%2BB6VmovOm0nJLQJytXKiJyuHP9DqPOVmP8S%2BazzX7Uqzov1nxo9fvH7y2QIDAQAB%0D%0AAoGAFhbD9O6r57fYCloJxB01gBMnTHfWrBH8vbXUbJAvorA7%2BwuIKG3KHS7n7Yqs%0D%0AfArI7FJXRVTo5m8RPdtaJ9ADAT9rjAi3A17TaEueyJl%2BB%2FhjHYhsd8MeFhTb2fh0%0D%0ArY3F6diL8U%2FYDbiAIegnKO0zcc6ynJrsQZvzb6DlY%2FCLPe0CQQD3KXJzw1ZfJ1ts%0D%0Ac370b%2FZC1YrRURw41Q0I8ljYJ8EJw%2FngVxrnCIsd43bRnOVp9guJrjTQRkhDC3Gn%0D%0AJ2Y0%2B42LAkEAxMxmh7QY4nItBTS0fe1KCat4VDxhyxYEhZKlGDhxW75vNROrripB%0D%0A1ZfBsq5xkY2MM9R7WKmL7SpStrUPIvEVqwJBAOXA4ISd61cupbytrDEbNscv7Afh%0D%0ApyNpYOGVLmNYqQgj5c7WCcsD1RYmkRgPCe8y6czFZJDLFHdGVxLz%2B%2F16bTsCQC9J%0D%0AOb2TnYMTkhO1JUU4tdh69e%2BvjoPgp3d80%2BRs83fq2wey0UaI6saqryUC21Dw5OYz%0D%0AQOv92RxEVhmGibuIl%2F8CQCiYrzwlZJDlsKrWPZT0E8rzNmLZkhNHzYJP9S7x%2BFKk%0D%0Am3gFeXEBgzGn9UOd6xIAp0p7A1XVBN8XzDMa09gSOks%3D%0D%0A-----END%20RSA%20PRIVATE%20KEY-----%0D%0A%0D%0A&bankCertificate=-----BEGIN%20CERTIFICATE-----%0D%0AMIIDRTCCAq6gAwIBAgIBADANBgkqhkiG9w0BAQQFADB7MQswCQYDVQQGEwJFRTEO%0D%0AMAwGA1UECBMFSGFyanUxEDAOBgNVBAcTB1RhbGxpbm4xDDAKBgNVBAoTA0VZUDEL%0D%0AMAkGA1UECxMCSVQxDDAKBgNVBAMTA2EuYTEhMB8GCSqGSIb3DQEJARYSYWxsYXIu%0D%0AYWxsYXNAZXlwLmVlMB4XDTk5MTExNTA4MTAzM1oXDTk5MTIxNTA4MTAzM1owezEL%0D%0AMAkGA1UEBhMCRUUxDjAMBgNVBAgTBUhhcmp1MRAwDgYDVQQHEwdUYWxsaW5uMQww%0D%0ACgYDVQQKEwNFWVAxCzAJBgNVBAsTAklUMQwwCgYDVQQDEwNhLmExITAfBgkqhkiG%0D%0A9w0BCQEWEmFsbGFyLmFsbGFzQGV5cC5lZTCBnzANBgkqhkiG9w0BAQEFAAOBjQAw%0D%0AgYkCgYEAvgETpV4kb4tU%2B0PXwIdC8O97MwJ9upqnyg6negXaZat7%2FoFVgt79Pm4L%0D%0AXzWpERP1FWDsRANM9L4qkaSsz7jcvDrLUzHvHxSrNfTVvJQWIpOjcyeAZPgelZqL%0D%0AzptJyS0CcrVyoicrhz%2FQ6jzlZj%2FEvms81%2B1Ks6L9Z8aPX7x%2B8tkCAwEAAaOB2DCB%0D%0A1TAdBgNVHQ4EFgQUFivCzZNmegEoOxYtg20YMMRB98gwgaUGA1UdIwSBnTCBmoAU%0D%0AFivCzZNmegEoOxYtg20YMMRB98ihf6R9MHsxCzAJBgNVBAYTAkVFMQ4wDAYDVQQI%0D%0AEwVIYXJqdTEQMA4GA1UEBxMHVGFsbGlubjEMMAoGA1UEChMDRVlQMQswCQYDVQQL%0D%0AEwJJVDEMMAoGA1UEAxMDYS5hMSEwHwYJKoZIhvcNAQkBFhJhbGxhci5hbGxhc0Bl%0D%0AeXAuZWWCAQAwDAYDVR0TBAUwAwEB%2FzANBgkqhkiG9w0BAQQFAAOBgQBfkayuot%2Be%0D%0AfwW8QmPwpWF5AY3oMT%2FfTncjCljDBOg39IQv4PjnpTdDfwwl3lUIZHHTLM2i0L%2Fc%0D%0AeD4D1UFM1qdp2VZzhBd1eeMjxYjCP8qL2v2MfLkCYcP30Sl6ISSkFjFc5qbGXZOc%0D%0AC82uR%2FwUZJDw9kj%2BR1O46%2FbyG8yA%2BS9FVw%3D%3D%0D%0A-----END%20CERTIFICATE-----%0D%0A") }
	};
}

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<body>
	<form action="@Request.Url.AbsolutePath" method="post">
		<label>Provider
			<select name="provider">@foreach(var key in providers.Keys) { 
				<option>@key</option> 
			}</select>
		</label>
		<label>Assist Account Id <input type="text" name="assistAccount" value="@assistAccount" placeholder="12345" /></label><br />
		<label>Dibs Account Id <input type="text" name="dibsAccount" value="@dibsAccount" placeholder="" /></label><br />
		<label>Dibs Secret <input type="text" name="dibsSecret" value="@dibsSecret" placeholder="" /></label><br />
		<input type="submit" value="Generate" />
	</form>
	@{
		if(Request.Url.Query=="?error") {
			<p><strong>Returned with error from provider</strong></p>
		}
		var successful = providers
			.Select(t => new { 
				Name = t.Key,
				Success = t.Value.VerifyResponse("12345", 100.20m, Request.HttpMethod=="POST" ? Request.Form : Request.QueryString) 
			})
			.Where(t=>t.Success && t.Name!="assist")
			.Select(t=>t.Name+"="+t.Success);

			<p>Verifiers say, @String.Join(", ",successful)</p>
			
		if(Request.HttpMethod=="POST") {
			if(Request.Form["dibsAcount"]!=null) {
				Response.Cookies.Add(new HttpCookie("dibsAccount", Request.Form["dibsAccount"]));
			}
			if(Request.Form["dibsSecret"]!=null) {
				Response.Cookies.Add(new HttpCookie("dibsSecret", Request.Form["dibsSecret"]));
			}
			if(Request.Form["assistAccount"]!=null) {
				Response.Cookies.Add(new HttpCookie("assistAccount", Request.Form["assistAccount"]));
			}
			IPaymentProvider provider;
			if(Request.Form["provider"]==null) {

			} else if(!providers.TryGetValue(Request.Form["provider"], out provider)) { 
				<p>Unknown provider @Request.Form["provider"]</p>
			} else {
				var paymentDetail = provider.GenerateDetails(
					"12345",
					100.20m,
					new Uri(Request.Url, Request.Url.AbsolutePath).ToString(),
					new Uri(Request.Url, Request.Url.AbsolutePath + "?error").ToString(),
					"Sample message"
				);
				<h4>@provider.GetType().Name</h4>
				<p><i>@paymentDetail.Url</i></p>
				<form action="@paymentDetail.Url" method="post">
					@foreach(string field in paymentDetail.Fields.Keys) {
						<label>@(field): <input type="readonly" name="@field" value="@paymentDetail.Fields[field]" /></label><br />
					}
					<input type="submit" />
				</form>
			}
		}
}
</body>
</html>